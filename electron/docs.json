{
  "app": {
    "type": "main",
    "instanceEvents": [
      "will-finish-launching",
      "ready",
      "window-all-closed",
      "before-quit",
      "will-quit",
      "quit",
      "open-file _macOS_",
      "open-url _macOS_",
      "activate _macOS_",
      "continue-activity _macOS_",
      "browser-window-blur",
      "browser-window-focus",
      "browser-window-created",
      "web-contents-created",
      "certificate-error",
      "select-client-certificate",
      "login",
      "gpu-process-crashed",
      "accessibility-support-changed _macOS_ _Windows_"
    ],
    "methods": [
      "quit()",
      "exit([exitCode])",
      "relaunch([options])",
      "isReady()",
      "focus()",
      "hide() _macOS_",
      "show() _macOS_",
      "getAppPath()",
      "getPath(name)",
      "getFileIcon(path[, options], callback)",
      "setPath(name, path)",
      "getVersion()",
      "getName()",
      "setName(name)",
      "getLocale()",
      "addRecentDocument(path) _macOS_ _Windows_",
      "clearRecentDocuments() _macOS_ _Windows_",
      "setAsDefaultProtocolClient(protocol[, path, args]) _macOS_ _Windows_",
      "removeAsDefaultProtocolClient(protocol[, path, args]) _macOS_ _Windows_",
      "isDefaultProtocolClient(protocol[, path, args]) _macOS_ _Windows_",
      "setUserTasks(tasks) _Windows_",
      "getJumpListSettings() _Windows_",
      "setJumpList(categories) _Windows_",
      "makeSingleInstance(callback)",
      "releaseSingleInstance()",
      "setUserActivity(type, userInfo[, webpageURL]) _macOS_",
      "getCurrentActivityType() _macOS_",
      "setAppUserModelId(id) _Windows_",
      "importCertificate(options, callback) _LINUX_",
      "disableHardwareAcceleration()",
      "getAppMemoryInfo()",
      "setBadgeCount(count) _Linux_ _macOS_",
      "getBadgeCount() _Linux_ _macOS_",
      "isUnityRunning() _Linux_",
      "getLoginItemSettings([options]) _macOS_ _Windows_",
      "setLoginItemSettings(settings[, path, args]) _macOS_ _Windows_",
      "isAccessibilitySupportEnabled() _macOS_ _Windows_",
      "setAboutPanelOptions(options) _macOS_",
      "commandLine.appendSwitch(switch[, value])",
      "commandLine.appendArgument(value)",
      "dock.bounce([type]) _macOS_",
      "dock.cancelBounce(id) _macOS_",
      "dock.downloadFinished(filePath) _macOS_",
      "dock.setBadge(text) _macOS_",
      "dock.getBadge() _macOS_",
      "dock.hide() _macOS_",
      "dock.show() _macOS_",
      "dock.isVisible() _macOS_",
      "dock.setMenu(menu) _macOS_",
      "dock.setIcon(image) _macOS_"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Control your application's event lifecycle."
  },
  "autoUpdater": {
    "type": "main",
    "instanceEvents": [
      "error",
      "checking-for-update",
      "update-available",
      "update-not-available",
      "update-downloaded"
    ],
    "methods": [
      "setFeedURL(url[, requestHeaders])",
      "getFeedURL()",
      "checkForUpdates()",
      "quitAndInstall()"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Enable apps to automatically update themselves."
  },
  "BrowserWindow": {
    "type": "main",
    "instanceEvents": [
      "page-title-updated",
      "close",
      "closed",
      "session-end _Windows_",
      "unresponsive",
      "responsive",
      "blur",
      "focus",
      "show",
      "hide",
      "ready-to-show",
      "maximize",
      "unmaximize",
      "minimize",
      "restore",
      "resize",
      "move",
      "moved _macOS_",
      "enter-full-screen",
      "leave-full-screen",
      "enter-html-full-screen",
      "leave-html-full-screen",
      "app-command _Windows_",
      "scroll-touch-begin _macOS_",
      "scroll-touch-end _macOS_",
      "scroll-touch-edge _macOS_",
      "swipe _macOS_",
      "sheet-begin _macOS_",
      "sheet-end _macOS_"
    ],
    "methods": [
      "new BrowserWindow([options])",
      "getAllWindows()",
      "getFocusedWindow()",
      "fromWebContents(webContents)",
      "fromId(id)",
      "addDevToolsExtension(path)",
      "removeDevToolsExtension(name)",
      "getDevToolsExtensions()"
    ],
    "instanceMethods": [
      "win.destroy()",
      "win.close()",
      "win.focus()",
      "win.blur()",
      "win.isFocused()",
      "win.isDestroyed()",
      "win.show()",
      "win.showInactive()",
      "win.hide()",
      "win.isVisible()",
      "win.isModal()",
      "win.maximize()",
      "win.unmaximize()",
      "win.isMaximized()",
      "win.minimize()",
      "win.restore()",
      "win.isMinimized()",
      "win.setFullScreen(flag)",
      "win.isFullScreen()",
      "win.setAspectRatio(aspectRatio[, extraSize]) _macOS_",
      "win.previewFile(path[, displayName]) _macOS_",
      "win.closeFilePreview() _macOS_",
      "win.setBounds(bounds[, animate])",
      "win.getBounds()",
      "win.setContentBounds(bounds[, animate])",
      "win.getContentBounds()",
      "win.setSize(width, height[, animate])",
      "win.getSize()",
      "win.setContentSize(width, height[, animate])",
      "win.getContentSize()",
      "win.setMinimumSize(width, height)",
      "win.getMinimumSize()",
      "win.setMaximumSize(width, height)",
      "win.getMaximumSize()",
      "win.setResizable(resizable)",
      "win.isResizable()",
      "win.setMovable(movable) _macOS_ _Windows_",
      "win.isMovable() _macOS_ _Windows_",
      "win.setMinimizable(minimizable) _macOS_ _Windows_",
      "win.isMinimizable() _macOS_ _Windows_",
      "win.setMaximizable(maximizable) _macOS_ _Windows_",
      "win.isMaximizable() _macOS_ _Windows_",
      "win.setFullScreenable(fullscreenable)",
      "win.isFullScreenable()",
      "win.setClosable(closable) _macOS_ _Windows_",
      "win.isClosable() _macOS_ _Windows_",
      "win.setAlwaysOnTop(flag[, level][, relativeLevel])",
      "win.isAlwaysOnTop()",
      "win.center()",
      "win.setPosition(x, y[, animate])",
      "win.getPosition()",
      "win.setTitle(title)",
      "win.getTitle()",
      "win.setSheetOffset(offsetY[, offsetX]) _macOS_",
      "win.flashFrame(flag)",
      "win.setSkipTaskbar(skip)",
      "win.setKiosk(flag)",
      "win.isKiosk()",
      "win.getNativeWindowHandle()",
      "win.hookWindowMessage(message, callback) _Windows_",
      "win.isWindowMessageHooked(message) _Windows_",
      "win.unhookWindowMessage(message) _Windows_",
      "win.unhookAllWindowMessages() _Windows_",
      "win.setRepresentedFilename(filename) _macOS_",
      "win.getRepresentedFilename() _macOS_",
      "win.setDocumentEdited(edited) _macOS_",
      "win.isDocumentEdited() _macOS_",
      "win.focusOnWebView()",
      "win.blurWebView()",
      "win.capturePage([rect, ]callback)",
      "win.loadURL(url[, options])",
      "win.reload()",
      "win.setMenu(menu) _Linux_ _Windows_",
      "win.setProgressBar(progress[, options])",
      "win.setOverlayIcon(overlay, description) _Windows_",
      "win.setHasShadow(hasShadow) _macOS_",
      "win.hasShadow() _macOS_",
      "win.setThumbarButtons(buttons) _Windows_",
      "win.setThumbnailClip(region) _Windows_",
      "win.setThumbnailToolTip(toolTip) _Windows_",
      "win.setAppDetails(options) _Windows_",
      "win.showDefinitionForSelection() _macOS_",
      "win.setIcon(icon) _Windows_ _Linux_",
      "win.setAutoHideMenuBar(hide)",
      "win.isMenuBarAutoHide()",
      "win.setMenuBarVisibility(visible) _Windows_ _Linux_",
      "win.isMenuBarVisible()",
      "win.setVisibleOnAllWorkspaces(visible)",
      "win.isVisibleOnAllWorkspaces()",
      "win.setIgnoreMouseEvents(ignore)",
      "win.setContentProtection(enable) _macOS_ _Windows_",
      "win.setFocusable(focusable) _Windows_",
      "win.setParentWindow(parent) _Linux_ _macOS_",
      "win.getParentWindow()",
      "win.getChildWindows()",
      "win.setAutoHideCursor(autoHide) _macOS_",
      "win.setVibrancy(type) _macOS_",
      "win.setTouchBar(touchBar) _macOS_ _Experimental_",
      "win.setBrowserView(browserView) _Experimental_"
    ],
    "instanceProperties": [
      "win.webContents",
      "win.id"
    ],
    "properties": [],
    "description": "Create and control browser windows."
  },
  "clipboard": {
    "type": "both",
    "instanceEvents": [],
    "methods": [
      "readText([type])",
      "writeText(text[, type])",
      "readHTML([type])",
      "writeHTML(markup[, type])",
      "readImage([type])",
      "writeImage(image[, type])",
      "readRTF([type])",
      "writeRTF(text[, type])",
      "readBookmark() _macOS_ _Windows_",
      "writeBookmark(title, url[, type]) _macOS_ _Windows_",
      "readFindText() _macOS_",
      "writeFindText(text) _macOS_",
      "clear([type])",
      "availableFormats([type])",
      "has(format[, type]) _Experimental_",
      "read(format) _Experimental_",
      "readBuffer(format) _Experimental_",
      "write(data[, type])"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Perform copy and paste operations on the system clipboard."
  },
  "contentTracing": {
    "type": "main",
    "instanceEvents": [],
    "methods": [
      "getCategories(callback)",
      "startRecording(options, callback)",
      "stopRecording(resultFilePath, callback)",
      "startMonitoring(options, callback)",
      "stopMonitoring(callback)",
      "captureMonitoringSnapshot(resultFilePath, callback)",
      "getTraceBufferUsage(callback)"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Collect tracing data from Chromium's content module for finding performance"
  },
  "crashReporter": {
    "type": "both",
    "instanceEvents": [],
    "methods": [
      "start(options)",
      "getLastCrashReport()",
      "getUploadedReports()",
      "getUploadToServer() _Linux_ _macOS_",
      "setUploadToServer(uploadToServer) _Linux_ _macOS_",
      "setExtraParameter(key, value) _macOS_"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Submit crash reports to a remote server."
  },
  "desktopCapturer": {
    "type": "renderer",
    "instanceEvents": [],
    "methods": [
      "getSources(options, callback)"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Access information about media sources that can be used to capture audio and"
  },
  "dialog": {
    "type": "main",
    "instanceEvents": [],
    "methods": [
      "showOpenDialog([browserWindow, ]options[, callback])",
      "showSaveDialog([browserWindow, ]options[, callback])",
      "showMessageBox([browserWindow, ]options[, callback])",
      "showErrorBox(title, content)",
      "showCertificateTrustDialog([browserWindow, ]options, callback) _macOS_ _Windows_"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Display native system dialogs for opening and saving files, alerting, etc."
  },
  "globalShortcut": {
    "type": "main",
    "instanceEvents": [],
    "methods": [
      "register(accelerator, callback)",
      "isRegistered(accelerator)",
      "unregister(accelerator)",
      "unregisterAll()"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Detect keyboard events when the application does not have keyboard focus."
  },
  "ipcMain": {
    "type": "main",
    "instanceEvents": [],
    "methods": [
      "on(channel, listener)",
      "once(channel, listener)",
      "removeListener(channel, listener)",
      "removeAllListeners([channel])"
    ],
    "instanceMethods": [],
    "instanceProperties": [
      "event.returnValue",
      "event.sender"
    ],
    "properties": [],
    "description": "Communicate asynchronously from the main process to renderer processes."
  },
  "ipcRenderer": {
    "type": "renderer",
    "instanceEvents": [],
    "methods": [
      "on(channel, listener)",
      "once(channel, listener)",
      "removeListener(channel, listener)",
      "removeAllListeners([channel])",
      "send(channel[, arg1][, arg2][, ...])",
      "sendSync(channel[, arg1][, arg2][, ...])",
      "sendToHost(channel[, arg1][, arg2][, ...])"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Communicate asynchronously from a renderer process to the main process."
  },
  "nativeImage": {
    "type": "both",
    "instanceEvents": [],
    "methods": [
      "createEmpty()",
      "createFromPath(path)",
      "createFromBuffer(buffer[, options])",
      "createFromDataURL(dataURL)"
    ],
    "instanceMethods": [
      "image.toPNG([options])",
      "image.toJPEG(quality)",
      "image.toBitmap([options])",
      "image.toDataURL([options])",
      "image.getBitmap([options])",
      "image.getNativeHandle() _macOS_",
      "image.isEmpty()",
      "image.getSize()",
      "image.setTemplateImage(option)",
      "image.isTemplateImage()",
      "image.crop(rect)",
      "image.resize(options)",
      "image.getAspectRatio()",
      "image.addRepresentation(options)"
    ],
    "instanceProperties": [],
    "properties": [],
    "description": "Create tray, dock, and application icons using PNG or JPG files."
  },
  "net": {
    "type": "main",
    "instanceEvents": [],
    "methods": [
      "request(options)"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Issue HTTP/HTTPS requests using Chromium's native networking library"
  },
  "powerMonitor": {
    "type": "main",
    "instanceEvents": [
      "suspend",
      "resume",
      "on-ac _Windows_",
      "on-battery _Windows_"
    ],
    "methods": [],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Monitor power state changes."
  },
  "powerSaveBlocker": {
    "type": "main",
    "instanceEvents": [],
    "methods": [
      "start(type)",
      "stop(id)",
      "isStarted(id)"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Block the system from entering low-power (sleep) mode."
  },
  "process": {
    "type": "both",
    "instanceEvents": [
      "loaded"
    ],
    "methods": [
      "crash()",
      "hang()",
      "setFdLimit(maxDescriptors) _macOS_ _Linux_",
      "getProcessMemoryInfo()",
      "getSystemMemoryInfo()",
      "getCPUUsage()",
      "getIOCounters() _Windows_ _Linux_"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [
      "noAsar",
      "type",
      "versions.electron",
      "versions.chrome",
      "resourcesPath",
      "mas",
      "windowsStore",
      "defaultApp"
    ],
    "description": "Extensions to process object."
  },
  "protocol": {
    "type": "main",
    "instanceEvents": [],
    "methods": [
      "registerStandardSchemes(schemes[, options])",
      "registerServiceWorkerSchemes(schemes)",
      "registerFileProtocol(scheme, handler[, completion])",
      "registerBufferProtocol(scheme, handler[, completion])",
      "registerStringProtocol(scheme, handler[, completion])",
      "registerHttpProtocol(scheme, handler[, completion])",
      "unregisterProtocol(scheme[, completion])",
      "isProtocolHandled(scheme, callback)",
      "interceptFileProtocol(scheme, handler[, completion])",
      "interceptStringProtocol(scheme, handler[, completion])",
      "interceptBufferProtocol(scheme, handler[, completion])",
      "interceptHttpProtocol(scheme, handler[, completion])",
      "uninterceptProtocol(scheme[, completion])"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Register a custom protocol and intercept existing protocol requests."
  },
  "remote": {
    "type": "renderer",
    "instanceEvents": [],
    "methods": [
      "require(module)",
      "getCurrentWindow()",
      "getCurrentWebContents()",
      "getGlobal(name)"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [
      "process"
    ],
    "description": "Use main process modules from the renderer process."
  },
  "screen": {
    "type": "both",
    "instanceEvents": [
      "display-added",
      "display-removed",
      "display-metrics-changed"
    ],
    "methods": [
      "getCursorScreenPoint()",
      "getPrimaryDisplay()",
      "getAllDisplays()",
      "getDisplayNearestPoint(point)",
      "getDisplayMatching(rect)"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Retrieve information about screen size, displays, cursor position, etc."
  },
  "session": {
    "type": "main",
    "instanceEvents": [
      "will-download"
    ],
    "methods": [
      "fromPartition(partition[, options])"
    ],
    "instanceMethods": [
      "ses.getCacheSize(callback)",
      "ses.clearCache(callback)",
      "ses.clearStorageData([options, callback])",
      "ses.flushStorageData()",
      "ses.setProxy(config, callback)",
      "ses.resolveProxy(url, callback)",
      "ses.setDownloadPath(path)",
      "ses.enableNetworkEmulation(options)",
      "ses.disableNetworkEmulation()",
      "ses.setCertificateVerifyProc(proc)",
      "ses.setPermissionRequestHandler(handler)",
      "ses.clearHostResolverCache([callback])",
      "ses.allowNTLMCredentialsForDomains(domains)",
      "ses.setUserAgent(userAgent[, acceptLanguages])",
      "ses.getUserAgent()",
      "ses.getBlobData(identifier, callback)",
      "ses.createInterruptedDownload(options)",
      "ses.clearAuthCache(options[, callback])"
    ],
    "instanceProperties": [
      "ses.cookies",
      "ses.webRequest",
      "ses.protocol"
    ],
    "properties": [
      "defaultSession"
    ],
    "description": "Manage browser sessions, cookies, cache, proxy settings, etc."
  },
  "shell": {
    "type": "both",
    "instanceEvents": [],
    "methods": [
      "showItemInFolder(fullPath)",
      "openItem(fullPath)",
      "openExternal(url[, options, callback])",
      "moveItemToTrash(fullPath)",
      "beep()",
      "writeShortcutLink(shortcutPath[, operation], options) _Windows_",
      "readShortcutLink(shortcutPath) _Windows_"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Manage files and URLs using their default applications."
  },
  "systemPreferences": {
    "type": "main",
    "instanceEvents": [
      "accent-color-changed _Windows_",
      "color-changed _Windows_",
      "inverted-color-scheme-changed _Windows_"
    ],
    "methods": [
      "isDarkMode() _macOS_",
      "isSwipeTrackingFromScrollEventsEnabled() _macOS_",
      "postNotification(event, userInfo) _macOS_",
      "postLocalNotification(event, userInfo) _macOS_",
      "subscribeNotification(event, callback) _macOS_",
      "unsubscribeNotification(id) _macOS_",
      "subscribeLocalNotification(event, callback) _macOS_",
      "unsubscribeLocalNotification(id) _macOS_",
      "getUserDefault(key, type) _macOS_",
      "setUserDefault(key, type, value) _macOS_",
      "isAeroGlassEnabled() _Windows_",
      "getAccentColor() _Windows_",
      "getColor(color) _Windows_",
      "isInvertedColorScheme() _Windows_"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Get system preferences."
  },
  "webContents": {
    "type": "main",
    "instanceEvents": [
      "did-finish-load",
      "did-fail-load",
      "did-frame-finish-load",
      "did-start-loading",
      "did-stop-loading",
      "did-get-response-details",
      "did-get-redirect-request",
      "dom-ready",
      "page-favicon-updated",
      "new-window",
      "will-navigate",
      "did-navigate",
      "did-navigate-in-page",
      "will-prevent-unload",
      "crashed",
      "plugin-crashed",
      "destroyed",
      "before-input-event",
      "devtools-opened",
      "devtools-closed",
      "devtools-focused",
      "certificate-error",
      "select-client-certificate",
      "login",
      "found-in-page",
      "media-started-playing",
      "media-paused",
      "did-change-theme-color",
      "update-target-url",
      "cursor-changed",
      "context-menu",
      "select-bluetooth-device",
      "paint",
      "devtools-reload-page",
      "will-attach-webview"
    ],
    "methods": [
      "getAllWebContents()",
      "getFocusedWebContents()",
      "fromId(id)"
    ],
    "instanceMethods": [
      "contents.loadURL(url[, options])",
      "contents.downloadURL(url)",
      "contents.getURL()",
      "contents.getTitle()",
      "contents.isDestroyed()",
      "contents.isFocused()",
      "contents.isLoading()",
      "contents.isLoadingMainFrame()",
      "contents.isWaitingForResponse()",
      "contents.stop()",
      "contents.reload()",
      "contents.reloadIgnoringCache()",
      "contents.canGoBack()",
      "contents.canGoForward()",
      "contents.canGoToOffset(offset)",
      "contents.clearHistory()",
      "contents.goBack()",
      "contents.goForward()",
      "contents.goToIndex(index)",
      "contents.goToOffset(offset)",
      "contents.isCrashed()",
      "contents.setUserAgent(userAgent)",
      "contents.getUserAgent()",
      "contents.insertCSS(css)",
      "contents.executeJavaScript(code[, userGesture, callback])",
      "contents.setAudioMuted(muted)",
      "contents.isAudioMuted()",
      "contents.setZoomFactor(factor)",
      "contents.getZoomFactor(callback)",
      "contents.setZoomLevel(level)",
      "contents.getZoomLevel(callback)",
      "contents.setZoomLevelLimits(minimumLevel, maximumLevel)",
      "contents.setVisualZoomLevelLimits(minimumLevel, maximumLevel)",
      "contents.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)",
      "contents.undo()",
      "contents.redo()",
      "contents.cut()",
      "contents.copy()",
      "contents.copyImageAt(x, y)",
      "contents.paste()",
      "contents.pasteAndMatchStyle()",
      "contents.delete()",
      "contents.selectAll()",
      "contents.unselect()",
      "contents.replace(text)",
      "contents.replaceMisspelling(text)",
      "contents.insertText(text)",
      "contents.findInPage(text[, options])",
      "contents.stopFindInPage(action)",
      "contents.capturePage([rect, ]callback)",
      "contents.hasServiceWorker(callback)",
      "contents.unregisterServiceWorker(callback)",
      "contents.print([options])",
      "contents.printToPDF(options, callback)",
      "contents.addWorkSpace(path)",
      "contents.removeWorkSpace(path)",
      "contents.openDevTools([options])",
      "contents.closeDevTools()",
      "contents.isDevToolsOpened()",
      "contents.isDevToolsFocused()",
      "contents.toggleDevTools()",
      "contents.inspectElement(x, y)",
      "contents.inspectServiceWorker()",
      "contents.send(channel[, arg1][, arg2][, ...])",
      "contents.enableDeviceEmulation(parameters)",
      "contents.disableDeviceEmulation()",
      "contents.sendInputEvent(event)",
      "contents.beginFrameSubscription([onlyDirty ,]callback)",
      "contents.endFrameSubscription()",
      "contents.startDrag(item)",
      "contents.savePage(fullPath, saveType, callback)",
      "contents.showDefinitionForSelection() _macOS_",
      "contents.setSize(options)",
      "contents.isOffscreen()",
      "contents.startPainting()",
      "contents.stopPainting()",
      "contents.isPainting()",
      "contents.setFrameRate(fps)",
      "contents.getFrameRate()",
      "contents.invalidate()",
      "contents.getWebRTCIPHandlingPolicy()",
      "contents.setWebRTCIPHandlingPolicy(policy)",
      "contents.getOSProcessId()"
    ],
    "instanceProperties": [
      "contents.id",
      "contents.session",
      "contents.hostWebContents",
      "contents.devToolsWebContents",
      "contents.debugger"
    ],
    "properties": [],
    "description": "Render and control web pages."
  },
  "webFrame": {
    "type": "renderer",
    "instanceEvents": [],
    "methods": [
      "setZoomFactor(factor)",
      "getZoomFactor()",
      "setZoomLevel(level)",
      "getZoomLevel()",
      "setZoomLevelLimits(minimumLevel, maximumLevel)",
      "setVisualZoomLevelLimits(minimumLevel, maximumLevel)",
      "setLayoutZoomLevelLimits(minimumLevel, maximumLevel)",
      "setSpellCheckProvider(language, autoCorrectWord, provider)",
      "registerURLSchemeAsSecure(scheme)",
      "registerURLSchemeAsBypassingCSP(scheme)",
      "registerURLSchemeAsPrivileged(scheme[, options])",
      "insertText(text)",
      "executeJavaScript(code[, userGesture, callback])",
      "getResourceUsage()",
      "clearCache()"
    ],
    "instanceMethods": [],
    "instanceProperties": [],
    "properties": [],
    "description": "Customize the rendering of the current web page."
  }
}